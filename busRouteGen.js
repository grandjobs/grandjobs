const Firebase = require('firebase');
var DomParser = require('dom-parser');
var parser = new DomParser();

/* This block is config info generated by Firebase to allow us to connect to
the DB */
let config = {
		apiKey: "AIzaSyCBqt6oDF0MEB17aCvNsno5NM4qozJUGeM",
		authDomain: "job-push-fbb6a.firebaseapp.com",
		databaseURL: "https://job-push-fbb6a.firebaseio.com",
		projectId: "job-push-fbb6a",
		storageBucket: "job-push-fbb6a.appspot.com",
		messagingSenderId: "539179420830"
	};

let app = Firebase.initializeApp(config);
const db = app.database();

var rootRef = db.ref();
var busRef = rootRef.child('BUSES');
var gtfsRouteList = [];
var infoPointRouteList = [];

/* This function returns a promise that tells us we have finished retrieving
a list of bus routes as listed by GTFS. We also push this list to the database
in this function but we will error check later to make sure that we have a list
matching the one on infoPoint. */
function getGTFSRoutes() {
	return fetch('https://openmobilitydata-data.s3-us-west-1.amazonaws.com/public/feeds/the-rapid/380/20190104/original/routes.txt')
		.then(results => results.text())
		.then(textBody => {
			//Split the file up using a newline regex
			var lines = textBody.split(/\n/);

			for (let i = 1; i < lines.length - 1; i++) {
				let line = lines[i].split(",");

				let trimmedToken = line[2].substring(1, line[2].length - 1);

				busRef.child(parseInt(trimmedToken)).set({ Description: line[3].substring(1,(line[3].length - 1)), Stops: "NULL" });

				gtfsRouteList.push(parseInt(trimmedToken));
			}
	});
}

/* This function returns a promise letting us know we have finished collecting
a list of routes from infoPoint. We will be using this info to double check
the list provided by GTFS since we are using info from both sites. */
function getInfoPointRoutes() {
	return fetch('https://connect.ridetherapid.org/InfoPoint/Minimal')
		.then(results => results.text())
		.then(textBody => {
			let routeListDom = parser.parseFromString(textBody);
			let routeEntries = routeListDom.getElementsByClassName('routeNameListEntry');

			for (let i = 0; i < routeEntries.length; i++) {
				let routeName = routeEntries[i].getAttribute("routeID");

				infoPointRouteList.push(parseInt(routeName));
			}
	});
}

/* This function parses through the stops.txt file from GTFS matching each entry
to a route based on stopid then pushes it to the appropriate route in Firebase */
function parseStopsTxt() {
	return fetch('https://openmobilitydata-data.s3-us-west-1.amazonaws.com/public/feeds/the-rapid/380/20190104/original/stops.txt')
		.then(results => results.text())
		.then(textBody => {
			var lines = textBody.split(/\n/);
			var matches = 0;

			for (let i = 0; i < infoPointRouteList.length; i++) {
				fetch('https://connect.ridetherapid.org/InfoPoint/Minimal/Stops/ForRoute?routeId=' + infoPointRouteList[i])
					.then(results => results.text())
					.then(textBody => {
						let stopListDom = parser.parseFromString(textBody);
						let stopEntries = stopListDom.getElementsByClassName('stopNameListEntry');

						var routeRef = busRef.child(infoPointRouteList[i])
						var stopsRef = routeRef.child('Stops');

						for (let k = 0; k < stopEntries.length; k = k + 2) {
							var stop_id = stopEntries[k].getAttribute("stopid");

							for (let j = 1; j < lines.length - 1; j++) {
								let line = lines[j].split(",");

								if (line[1] == stop_id) {
									stopsRef.child(stop_id).set({ Latitude: line[4], Longitude: line[5], Description: line[2]});

									matches++;
									j = lines.length - 1;
								}
							}
						}
					});
			}
	});
}

/* This function waits for the promises to return in paralell
from a few functions then parses through the stops.txt file.
It also does some basic error checking by calling another function. */
function loadDB() {
	Promise.all([getGTFSRoutes(), getInfoPointRoutes()])
		.then(function() {
			parseStopsTxt()
				.then(function() {
					errorCheck();
				});
		});
}

/* Function to do basic error checking including verifying that
information obtained from different sources is identical. This should
be expanded to be more intensive at a later stage in development. */
function errorCheck() {
		if (infoPointRouteList.length != gtfsRouteList.length) {
			console.log("Route lists differ in length ERROR");
		}

		for (let i = 0; i < infoPointRouteList.length; i++) {
			if (gtfsRouteList.indexOf(infoPointRouteList[i]) < 0) {
				console.log('Route ' + infoPointRouteList[i] + ' found in infoPoint but not in GTFS');
			}
		}
}

//Calls the function loadDb which can be considered 'main' for this file
loadDB();
